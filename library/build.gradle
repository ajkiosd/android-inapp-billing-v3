apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'checkstyle'

group 'com.anjlab.android.iab.v3'
version '2.0.0'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        versionCode 1
        versionName project.version
        minSdkVersion 14
        targetSdkVersion 30
        consumerProguardFiles 'progress-proguard.txt'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    testOptions.unitTests {
        // Don't throw runtime exceptions for android calls that are not mocked
        returnDefaultValues = true

        // Always show the result of every unit test, even if it passes.
        all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }
}

dependencies {
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'com.android.billingclient:billing:4.0.0'
}

configurations.archives.extendsFrom configurations.default

task androidJavadocs(type: Javadoc) {
    source = 'src/main/java,src/main/aidl'
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from 'src/main/java'
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

check.dependsOn('checkstyle')
connectedCheck.dependsOn('checkstyle')

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals('com.android.builder.BuilderConstants.DEBUG')) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompileProvider
    task.from variant.javaCompileProvider.get().destinationDir
    task.baseName 'anjlab-iabv3'
    task.doLast {
        println "Copying jar to sample project..."
        copy {
            from task.archivePath
            into '../sample/libs'
            rename { String fileName -> 'anjlab-iabv3-current.jar' }
        }
    }
    artifacts.add('archives', task);
}
